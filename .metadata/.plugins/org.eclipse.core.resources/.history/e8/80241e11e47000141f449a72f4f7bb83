var loadDetail = function(dataSource){
	console.log("EpisodeID : "+Math.floor(dataSource.id1));
	//* function to pull epsiode data from a different TVMaze API
	var epData = function(url){
		var apiURL = "http://api.tvmaze.com/episodes/"+url;
		// Create a variable to pass to the onload property of the createHTTPClient method
		var loadData = function (e){
			var remoteData = JSON.parse(this.responseText);
			var getShow = function(data){
				var id = data.id;
				var epSyn = "Episode Synopsis: " + data.summary.replace( /<[^>]+>/g, '' );
				var episode = data.episode;
				var hh = data.airtime.substring(0,2);
				var mm = data.airtime.substring(2,5);
				if (hh > 12){
					var ampm = "pm";
				}else{
					var ampm = "am";
				};
				
				if (hh === "00"){
					var HH = 12;
				}else if (hh >12){
					var HH = hh - 12;
				}else{
					var HH = hh;
				};
	
				var closeWin = function(){
					detailWindow.close();
				};
				
				// Creates the Opportunty Detail Window
				var detailWindow = Ti.UI.createWindow({
					backgroundColor: "#09f",
					title: "Epsiode Details",
					statusBarStyle: 2,
					barColor: "#bf0c0c",
					titleAttributes: {color: "#fc0"}
				});
				
				var btnClose = Ti.UI.createLabel({
					text: "Close",
					font: {fontSize: 18, fontWeight: "bold"},
					color: "#222", textAlign: "center",
					backgroundColor: "#6fc",
					borderColor: "#222",
					borderRadius: 4,
					top: 700, height: 35, width: 120
				});
				btnClose.addEventListener("click", closeWin);
				
				// Labels
				var lblDate = Ti.UI.createLabel({
					text: "Date:",
					font: {fontSize: 14, fontFamily: "Helvetica Neue", fontWeight: "bold"},
					color: "#eee",
					top: 25,
					height: 14,
					left: 213
				});
				
				var lblOpportunity = Ti.UI.createLabel({
					text: "Opportunity:",
					font: {fontSize: 14, fontFamily: "Helvetica Neue", fontWeight: "bold"},
					color: "#eee",
					top: 145,
					height: 14,
					left: 13
				});
				
				var lblPromise = Ti.UI.createLabel({
					text: "Promised Resolution:",
					font: {fontSize: 14, fontFamily: "Helvetica Neue", fontWeight: "bold"},
					color: "#eee",
					top: lblOpportunity.top + lblOpportunity.height + 75,
					height: 14,
					left: 13
				});
				
				var lblPromisedBy = Ti.UI.createLabel({
					text: "Promised By:",
					font: {fontSize: 14, fontFamily: "Helvetica Neue", fontWeight: "bold"},
					color: "#eee",
					top: lblPromise.top + lblPromise.height + 75,
					height: 14,
					left: 13
				});
				
				// Data
				//var rowID = dataSource.id;
				//exports.rowID = rowID;
				
				var dataShow = Ti.UI.createLabel({
					text: dataSource.show,
					font: {fontSize: 18, fontFamily: "Helvetica Neue", fontWeight: "bold"},
					color: "#ffcc00",
					top: 42,
					left: 8
				});
				//exports.dataCustomer = dataCustomer;
				
				var dataSummary = Ti.UI.createLabel({
					text: epSyn,
					font: {fontSize: 18, fontFamily: "Helvetica Neue", fontWeight: "bold"},
					color: "#ffcc00",textAlign:"left",
					top: 42,
					width: "80%",
					height: 100
				});
				//exports.dataDate = dataDate;
				
				/*var dataOpportunity = Ti.UI.createLabel({
					text: dataSource.problem,
					font: {fontSize: 18, fontFamily: "Helvetica Neue", fontWeight: "bold"},
					color: "#ffcc00",
					top: lblOpportunity.top + 16,
					left: 8
				});
				exports.dataOpportunity = dataOpportunity;
				
				// Highlighted the Promised Resolution
				var customBackground = Ti.UI.createView({
					borderColor: "#222",
					borderWidth: 2,
					borderRadius: 7,
					backgroundColor: "#ffcc00",
					top: lblPromise.top + 18,
					height: 70,
					left: 4,
					width: 308,
					zIndex: 1
				});
				
				var dataPromise = Ti.UI.createLabel({
					text: dataSource.promise,
					font: {fontSize: 18, fontFamily: "Helvetica Neue", fontWeight: "bold"},
					color: "#bf0c0c",
					textAlign: "left",
					verticalAlign: 1,
					top: lblPromise.top + 20,
					height: 66,
					left: 8,
					width: 300,
					zIndex: 2
				});
				exports.dataPromise = dataPromise;
				
				var dataPromisedBy = Ti.UI.createLabel({
					text: dataSource.manager,
					font: {fontSize: 18, fontFamily: "Helvetica Neue", fontWeight: "bold"},
					color: "#ffcc00",
					top: lblPromisedBy.top + 16,
					left: 8
				});
				
				// Popup Modal buttons
				var butMakeItRight = Ti.UI.createLabel({
					text: "Make it Right!",
					borderColor: "#333",
					borderWidth: 2,
					borderRadius: 5,
					backgroundColor: "#0f0",
					font: {fontSize: 14, fontFamily: "Helvetica Neue", fontWeight: "bold"},
					color: "#333",
					top: 425,
					left: 10,
					width: 120,
					height: 35,
					textAlign: "center"
				});
				
				butMakeItRight.addEventListener("click", openSaveModal);
				
				var butCancel = Ti.UI.createLabel({
					text: "-Cancel-",
					font: {fontSize: 14, fontFamily: "Helvetica Neue", fontWeight: "bold"},
					color: "#fc0",
					top: 425,
					left: 135,
					width: 120,
					height: 35,
					textAlign: "center"
				});
				
				butCancel.addEventListener("click", function(){
					detailWindow.close();
				});
				
				// Creates the Menu Bar Buttons
				var butAdd = Ti.UI.createButton({
					title: "Edit",
					left: 15
				});
				
				var tagline = Ti.UI.createLabel({
					borderColor: "#333",
					borderWidth: 2,
					backgroundColor: "#fc0",
					font: {fontSize: 11, fontFamily: "Helvetica Neue", fontWeight: "bold"},
					color: "#333",
					text: "Be Clean - Be Nice - Be Fast - Get It Right! - Make It Right!!!",
					textAlign: "center",
					bottom: 10,
					width: "100%",
					height: 22
				});*/
				
				//var getUpdate = require("update"); // Declared here because it creates a loop if it is declared globally
				
				//menuBar.add(titleMB, butAdd);
				//butAdd.addEventListener("click", getUpdate.loadInput);
				detailWindow.add(btnClose);
				detailWindow.add(dataSummary);
				detailWindow.add(lblOpportunity);
				detailWindow.add(lblPromise);
				detailWindow.add(lblPromisedBy);
				//detailWindow.add(dataCustomer);
				//detailWindow.add(dataDate);
				detailWindow.open();
				};
			getShow(remoteData);
		};
		// Create an alert box to display an error message for the onerror property of the createHTTPClient method
		var errorData = function (e){
			alert("Error: " + e.error);
		};
		var remoteData = Ti.Network.createHTTPClient({
			onload: loadData,
			onerror: errorData
		});
		remoteData.open("GET", apiURL);
		remoteData.send();
		
	}; //* epData function ends
	epData(JSON.stringify(Math.floor(dataSource.id1)));
	
};
exports.loadDetail = loadDetail;